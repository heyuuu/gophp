// Code generated by "stringer -linecomment -type=AssignOpKind,BinaryOpKind,UnaryOpKind,MagicConstKind,CastKind,IncludeKind -output=enum_string.go"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AssignOpBitwiseAnd-1]
	_ = x[AssignOpBitwiseOr-2]
	_ = x[AssignOpBitwiseXor-3]
	_ = x[AssignOpCoalesce-4]
	_ = x[AssignOpConcat-5]
	_ = x[AssignOpDiv-6]
	_ = x[AssignOpMinus-7]
	_ = x[AssignOpMod-8]
	_ = x[AssignOpMul-9]
	_ = x[AssignOpPlus-10]
	_ = x[AssignOpPow-11]
	_ = x[AssignOpShiftLeft-12]
	_ = x[AssignOpShiftRight-13]
}

const _AssignOpKind_name = "&=|=^=??=.=/=-=%=*=+=**=<<=>>="

var _AssignOpKind_index = [...]uint8{0, 2, 4, 6, 9, 11, 13, 15, 17, 19, 21, 24, 27, 30}

func (i AssignOpKind) String() string {
	i -= 1
	if i >= AssignOpKind(len(_AssignOpKind_index)-1) {
		return "AssignOpKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _AssignOpKind_name[_AssignOpKind_index[i]:_AssignOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BinaryOpBitwiseAnd-1]
	_ = x[BinaryOpBitwiseOr-2]
	_ = x[BinaryOpBitwiseXor-3]
	_ = x[BinaryOpBooleanAnd-4]
	_ = x[BinaryOpBooleanOr-5]
	_ = x[BinaryOpCoalesce-6]
	_ = x[BinaryOpConcat-7]
	_ = x[BinaryOpDiv-8]
	_ = x[BinaryOpEqual-9]
	_ = x[BinaryOpGreater-10]
	_ = x[BinaryOpGreaterOrEqual-11]
	_ = x[BinaryOpIdentical-12]
	_ = x[BinaryOpLogicalAnd-13]
	_ = x[BinaryOpLogicalOr-14]
	_ = x[BinaryOpLogicalXor-15]
	_ = x[BinaryOpMinus-16]
	_ = x[BinaryOpMod-17]
	_ = x[BinaryOpMul-18]
	_ = x[BinaryOpNotEqual-19]
	_ = x[BinaryOpNotIdentical-20]
	_ = x[BinaryOpPlus-21]
	_ = x[BinaryOpPow-22]
	_ = x[BinaryOpShiftLeft-23]
	_ = x[BinaryOpShiftRight-24]
	_ = x[BinaryOpSmaller-25]
	_ = x[BinaryOpSmallerOrEqual-26]
	_ = x[BinaryOpSpaceship-27]
}

const _BinaryOpKind_name = "&|^&&||??./==>>====andorxor-%*!=!==+**<<>><<=<=>"

var _BinaryOpKind_index = [...]uint8{0, 1, 2, 3, 5, 7, 9, 10, 11, 13, 14, 16, 19, 22, 24, 27, 28, 29, 30, 32, 35, 36, 38, 40, 42, 43, 45, 48}

func (i BinaryOpKind) String() string {
	i -= 1
	if i >= BinaryOpKind(len(_BinaryOpKind_index)-1) {
		return "BinaryOpKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _BinaryOpKind_name[_BinaryOpKind_index[i]:_BinaryOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnaryOpPlus-1]
	_ = x[UnaryOpMinus-2]
	_ = x[UnaryOpBooleanNot-3]
	_ = x[UnaryOpBitwiseNot-4]
	_ = x[UnaryOpPreInc-5]
	_ = x[UnaryOpPreDec-6]
	_ = x[UnaryOpPostInc-7]
	_ = x[UnaryOpPostDec-8]
}

const _UnaryOpKind_name = "+-!~++--++--"

var _UnaryOpKind_index = [...]uint8{0, 1, 2, 3, 4, 6, 8, 10, 12}

func (i UnaryOpKind) String() string {
	i -= 1
	if i >= UnaryOpKind(len(_UnaryOpKind_index)-1) {
		return "UnaryOpKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _UnaryOpKind_name[_UnaryOpKind_index[i]:_UnaryOpKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MagicConstClass-1]
	_ = x[MagicConstDir-2]
	_ = x[MagicConstFile-3]
	_ = x[MagicConstFunction-4]
	_ = x[MagicConstLine-5]
	_ = x[MagicConstMethod-6]
	_ = x[MagicConstNamespace-7]
	_ = x[MagicConstTrait-8]
}

const _MagicConstKind_name = "__CLASS____DIR____FILE____FUNCTION____LINE____METHOD____NAMESPACE____TRAIT__"

var _MagicConstKind_index = [...]uint8{0, 9, 16, 24, 36, 44, 54, 67, 76}

func (i MagicConstKind) String() string {
	i -= 1
	if i >= MagicConstKind(len(_MagicConstKind_index)-1) {
		return "MagicConstKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MagicConstKind_name[_MagicConstKind_index[i]:_MagicConstKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CastArray-1]
	_ = x[CastBool-2]
	_ = x[CastDouble-3]
	_ = x[CastInt-4]
	_ = x[CastObject-5]
	_ = x[CastString-6]
	_ = x[CastUnset-7]
}

const _CastKind_name = "(array)(bool)(float)(int)(object)(string)(unset)"

var _CastKind_index = [...]uint8{0, 7, 13, 20, 25, 33, 41, 48}

func (i CastKind) String() string {
	i -= 1
	if i >= CastKind(len(_CastKind_index)-1) {
		return "CastKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CastKind_name[_CastKind_index[i]:_CastKind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KindInclude-1]
	_ = x[KindIncludeOnce-2]
	_ = x[KindRequire-3]
	_ = x[KindRequireOnce-4]
}

const _IncludeKind_name = "includeinclude_oncerequirerequire_once"

var _IncludeKind_index = [...]uint8{0, 7, 19, 26, 38}

func (i IncludeKind) String() string {
	i -= 1
	if i >= IncludeKind(len(_IncludeKind_index)-1) {
		return "IncludeKind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _IncludeKind_name[_IncludeKind_index[i]:_IncludeKind_index[i+1]]
}
